import { io, Socket } from 'socket.io-client';
import AsyncStorage from '@react-native-async-storage/async-storage';

let socket: Socket | null = null;

export const initializeSocket = async (): Promise<Socket> => {
  if (socket) return socket; // N·∫øu ƒë√£ c√≥ socket th√¨ tr·∫£ v·ªÅ lu√¥n

  try {
    const accessToken = await AsyncStorage.getItem('accessToken');
    if (!accessToken) {
      console.error('üö® Kh√¥ng t√¨m th·∫•y Access Token, kh√¥ng th·ªÉ k·∫øt n·ªëi socket');
      throw new Error('Kh√¥ng c√≥ Access Token');
    }

    console.log('üáªüá≥ üëâ Access Token:', accessToken);

    socket = io('https://ctynamviet.1erp.vn', {
      extraHeaders: {
        Authorization: `Bearer ${accessToken}`,
      },
      reconnection: true, // Cho ph√©p t·ª± ƒë·ªông reconnect
      reconnectionAttempts: 5, // Th·ª≠ l·∫°i t·ªëi ƒëa 5 l·∫ßn
      reconnectionDelay: 3000, // M·ªói l·∫ßn th·ª≠ l·∫°i c√°ch nhau 3 gi√¢y
    });

    socket.on('connect', () => {
      console.log('‚úÖ Socket connected');
    });

    socket.on('disconnect', () => {
      console.log('‚ùå Socket disconnected');
    });

    socket.on('connect_error', (error) => {
      console.error('‚ùó Socket connection error:', error);
    });
  } catch (error) {
    console.error('‚ö†Ô∏è Error initializing socket:', error);
  }

  return socket!;
};


export const getSocket = async (): Promise<Socket> => {
  if (socket) {
    return socket;
  }

  console.warn('‚ö†Ô∏è Socket not initialized. Waiting for initialization...');
  return await initializeSocket();
};

export const disconnectSocket = () => {
  if (socket) {
    socket.disconnect();
    socket = null;
    console.log('Socket disconnected');
  }
};
